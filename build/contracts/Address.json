{"fileName":"Address.sol","contractName":"Address","source":"pragma solidity ^0.5.0;\n\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n}\n","sourcePath":"contracts/erc-1155/contracts/Address.sol","sourceMap":"86:1006:1:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;225:41;222:2;;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24;2:356","deployedSourceMap":"86:1006:1:-;;;;;;;;;;;;;;","abi":[],"ast":{"absolutePath":"contracts/erc-1155/contracts/Address.sol","exportedSymbols":{"Address":[140]},"id":141,"nodeType":"SourceUnit","nodes":[{"id":123,"literals":["solidity","^","0.5",".0"],"nodeType":"PragmaDirective","src":"0:23:1"},{"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":"Utility library of inline functions on addresses","fullyImplemented":true,"id":140,"linearizedBaseContracts":[140],"name":"Address","nodeType":"ContractDefinition","nodes":[{"body":{"id":138,"nodeType":"Block","src":"531:558:1","statements":[{"assignments":[131],"declarations":[{"constant":false,"id":131,"name":"size","nodeType":"VariableDeclaration","scope":138,"src":"541:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":130,"name":"uint256","nodeType":"ElementaryTypeName","src":"541:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":132,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"541:12:1"},{"externalReferences":[{"size":{"declaration":131,"isOffset":false,"isSlot":false,"src":"1028:4:1","valueSize":1}},{"account":{"declaration":125,"isOffset":false,"isSlot":false,"src":"1048:7:1","valueSize":1}}],"id":133,"nodeType":"InlineAssembly","operations":"{ size := extcodesize(account) }","src":"1017:41:1"},{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":134,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"1074:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1081:1:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1074:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":129,"id":137,"nodeType":"Return","src":"1067:15:1"}]},"documentation":"Returns whether the target address is a contract\n@dev This function will return false if invoked during the constructor of a contract,\nas the code is not actually created until after the constructor finishes.\n@param account address of the account to check\n@return whether the target address is a contract","id":139,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nodeType":"FunctionDefinition","parameters":{"id":126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":125,"name":"account","nodeType":"VariableDeclaration","scope":139,"src":"485:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":124,"name":"address","nodeType":"ElementaryTypeName","src":"485:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"484:17:1"},"returnParameters":{"id":129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":128,"name":"","nodeType":"VariableDeclaration","scope":139,"src":"525:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":127,"name":"bool","nodeType":"ElementaryTypeName","src":"525:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"524:6:1"},"scope":140,"src":"465:624:1","stateMutability":"view","superFunction":null,"visibility":"internal"}],"scope":141,"src":"86:1006:1"}],"src":"0:1093:1"},"bytecode":"0x605e6026600b82828239805160001a6073141515601857fe5b30600052607381538281f350fe73000000000000000000000000000000000000000030146080604052600436106023575b60006000fdfea265627a7a72305820b97309fc8f0824d9c15398500257de9ca672a94e5aed93b82d7f42e00310ce7764736f6c634300050a0032","deployedBytecode":"0x73000000000000000000000000000000000000000030146080604052600436106023575b60006000fdfea265627a7a72305820b97309fc8f0824d9c15398500257de9ca672a94e5aed93b82d7f42e00310ce7764736f6c634300050a0032","compiler":{"name":"solc","version":"0.5.10+commit.5a6ea5b1.Emscripten.clang","optimizer":{},"evmVersion":"constantinople"}}
